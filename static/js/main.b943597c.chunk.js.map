{"version":3,"sources":["components/InputNumber.js","components/History.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","assets/icons/index.js","index.js"],"names":["InputNumber","addContact","useState","no","setNo","name","setName","className","color","style","width","margin","id","type","placeholder","value","onChange","e","target","href","onClick","History","contacts","deleteContact","length","map","ele","idx","borderRadius","top","sno","App","initContacts","localStorage","getItem","JSON","parse","setContacts","useEffect","setItem","stringify","colorScheme","fluid","justifyContent","src","alt","height","placement","role","textAlign","sm","xs","path","myContact","contact","filter","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","icons","Object","assign","cilSend","cilTrash","React","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b943597c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n    CCard,\n    CCardBody,\n    CCardTitle,\n    CButton,\n    CFormInput,\n    CInputGroup,\n    CInputGroupText,\n    CForm,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nfunction InputNumber({addContact}) {\n    const [no, setNo] = useState(\"\");\n    const [name, setName] = useState(\"\");\n\n    return (\n        <div className=\"pt-5 pb-5\">\n            <CCard color=\"dark\" style={{ width: '80%', margin: \"auto\", color: \"white\" }}>\n                <CCardBody>\n                    <CCardTitle>Enter Number</CCardTitle>\n                    <CForm className=\"mt-3\">\n                        <CInputGroup className=\"mb-3\">\n                            <CInputGroupText>Name</CInputGroupText>\n                            <CFormInput id=\"name\" type=\"text\" placeholder=\"Some One\" value={name} onChange={(e) => setName(e.target.value)} />\n                        </CInputGroup>\n                        <CInputGroup className=\"mb-3\">\n                            <CInputGroupText>&nbsp;+91&nbsp;&nbsp;&nbsp;</CInputGroupText>\n                            <CFormInput id=\"no\" type=\"number\" placeholder=\"123456\" value={no} onChange={(e) => setNo(e.target.value)} />\n                        </CInputGroup>\n                    </CForm>\n                    <CButton className=\"w-100\" href={\"https://wa.me/91\" + no} onClick={() => addContact(name, no)}>Send Message <CIcon name=\"cil-send\"></CIcon></CButton>\n                </CCardBody>\n            </CCard>\n        </div>\n    )\n}\n\nexport default InputNumber\n","import React from 'react'\nimport {\n    CCard,\n    CCardBody,\n    CCardTitle,\n    CCardText,\n    CButton,\n    CContainer,\n    CRow,\n    CCol,\n    CBadge\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nfunction History({ contacts, deleteContact }) {\n    \n    return (\n        <CContainer className=\"mt-3\">\n            {\n                (!contacts || contacts.length === 0)? \"No Previous Contacts to Display\":\n                contacts.map((ele, idx) =>\n                    <CCard key={ele.sno} className=\"mb-3\" color=\"dark\" style={{ color: \"white\", borderRadius: 25 }}>\n                        <CCardBody>\n                            <CCardTitle>{ele.name}</CCardTitle>\n                            <CCardText>{ele.no}</CCardText>\n                            <CRow>\n                                <CCol>\n                                    <CButton href={\"https://wa.me/91\" + ele.no} className=\"w-100\" color=\"light\">\n                                        Text  <CBadge color=\"success\" style={{ top: 1.5 }}><CIcon name=\"cil-send\"></CIcon></CBadge>\n                                    </CButton>\n                                </CCol>\n                                <CCol>\n                                    <CButton href=\"#\" className=\"w-100\" color=\"light\" onClick={() => deleteContact(ele)}>\n                                        Delete <CBadge color=\"danger\" style={{ top: 1.5 }}><CIcon name=\"cil-trash\"></CIcon></CBadge>\n                                    </CButton>\n                                </CCol>\n                            </CRow>\n                        </CCardBody>\n                    </CCard>\n                )\n            }\n\n\n        </CContainer>\n    )\n}\n\nexport default History\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  CNavbar,\n  CContainer,\n  CNavbarBrand,\n  CNavItem,\n  CNavLink,\n  CNavbarNav,\n  CRow,\n  CCol\n} from '@coreui/react'\nimport InputNumber from './components/InputNumber';\nimport History from './components/History';\nimport './App.css'\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Redirect,\n  // Link,\n} from \"react-router-dom\";\n\nfunction App() {\n  let initContacts;\n  if (localStorage.getItem(\"whatsany\") === null) {\n    initContacts = [];\n  }\n  else {\n    initContacts = JSON.parse(localStorage.getItem(\"whatsany\"));\n  }\n\n  const [contacts, setContacts] = useState(initContacts);\n\n  const deleteContact = (contact) => {\n    setContacts(contacts.filter((e) => {\n      return e !== contact;\n    }));\n    localStorage.setItem(\"whatsany\", JSON.stringify(contacts));\n  }\n\n  const addContact = (name, no) => {\n    let sno;\n    if (contacts.length === 0) {\n      sno = 0;\n    }\n    else {\n      sno = contacts[contacts.length - 1].sno + 1;\n    }\n    const myContact = {\n      sno: sno,\n      name: name,\n      no: no,\n    }\n    setContacts([...contacts, myContact]);\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"whatsany\", JSON.stringify(contacts));\n  }, [contacts])\n\n  return (\n    <>\n      <CNavbar colorScheme=\"dark\" className=\"bg-dark\">\n        <CContainer fluid style={{ justifyContent: \"center\" }}>\n          <CNavbarBrand href=\"#\">\n            <img\n              src=\"WhatsAny-1/logo.png\"\n              alt=\"\"\n              width=\"22\"\n              height=\"24\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n            WhatsAny-1\n          </CNavbarBrand>\n        </CContainer>\n      </CNavbar>\n\n      <CNavbar className=\"nav nav-tabs\" placement=\"fixed-bottom\">\n        <CContainer fluid role=\"navigation\" >\n          <CNavbarNav className=\"w-100\" style={{ justifyContent: \"center\", textAlign: \"center\" }}>\n            <CRow>\n              <CCol sm=\"6\" xs=\"6\">\n                <CNavItem>\n                  <CNavLink href=\"#/input-number\">\n                    Input Number\n                  </CNavLink>\n                </CNavItem>\n              </CCol>\n              <CCol sm=\"6\" xs=\"6\">\n                <CNavItem>\n                  <CNavLink href=\"#/history\">\n                    History\n                  </CNavLink>\n                </CNavItem>\n              </CCol>\n            </CRow>\n          </CNavbarNav>\n        </CContainer>\n      </CNavbar>\n\n      <HashRouter>\n        <Switch>\n          <Route path=\"/input-number\">\n            <InputNumber addContact={addContact} />\n          </Route>\n          <Route path=\"/history\">\n            <History contacts={contacts} deleteContact={deleteContact} />\n          </Route>\n          <Redirect to=\"/input-number\" />\n        </Switch>\n      </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n    cilSend,\n    cilTrash,\n} from '@coreui/icons'\n\nexport const icons = Object.assign({}, {\n    cilSend,\n    cilTrash,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@coreui/coreui/dist/css/coreui.min.css'\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { icons } from './assets/icons'\n\nReact.icons = icons;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}